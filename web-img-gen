#!/usr/bin/env python3

import subprocess, shlex
import sys, getopt
from os import path, makedirs ,walk, sep
from src.image_gen import generateResponsiveImages, saveResponsiveImage
from src.util import splitFilePath, listOutFilePaths
import re
import json

# If there isnt any json file with the config, the script will use this instead

defaultConfig = [
    { "size": 20,       "suffix": '_xxs' },
    { "size": 40,       "suffix": '_xs' },
    { "size": 60,       "suffix": '_s' },
    { "size": 80,       "suffix": '_m' },
    { "size": [20,20],  "suffix": "-20x20"}
]

# The config used
configs = defaultConfig

def main():
    inputLocation =     None
    outputLocation =    None
    recursiveMode =     False
    imagesToSave =      None

    try:
        myopts, args = getopt.getopt(
            sys.argv[1:],
            "Ri:o:c:",
            ['recursive', 'input=', 'output=', 'config=','help'])

    except getopt.GetoptError as err:
        print(err)
        usage()
        sys.exit(2)
    
    for o, a in myopts:
        if o in ('-i','--input'):
            inputLocation = a

        elif o in ('-o','--output'):
            outputLocation = a

        elif o in ('-R', '--recursive'):
            print("Recursive mode is on")
            recursiveMode = True
            
        elif o in ('-c', '--config'):
            print("Adding config...")
            loadConfigByPath(a)

        elif o == '-h':
            usage()
            sys.exit(0)

    print("All parameters set! Converting...")

    if(not inputLocation):
        print("no input location! exitting")
        usage()
        sys.exit(2)
    
    if(not outputLocation):
        print("no output location! exitting")
        usage()
        sys.exit(2)

    if(recursiveMode):
        if(not path.isdir(inputLocation)):
            print("Recursive mode on a file! exitting")
            usage()
            sys.exit(2)
        else:
            if(not inputLocation.endswith('/')):
                inputLocation = inputLocation + "/"

            if(not outputLocation.endswith('/')):
                outputLocation = outputLocation + "/"
            
            filePaths = listOutFilePaths(inputLocation, outputLocation)
            for filePath in filePaths:
                if(not path.exists(filePath['outputLocation']['folder'])):
                    makedirs(filePath['outputLocation']['folder'])
                
                imagesToSave = generateResponsiveImages(configs, filePath['inputLocation'])
                
                for image in imagesToSave:
                    saveResponsiveImage(image, filePath['outputLocation']['folder'])
    else:
        if(not path.isfile(inputLocation)):            
            print("The input is not a file! exitting")
            usage()
            sys.exit(2)

        else:
            if(not path.exists(outputLocation)):
                print("Creating output directory...")
                makedirs(outputLocation)

            inputLocation = splitFilePath(inputLocation)
            imagesToSave = generateResponsiveImages(configs, inputLocation)

            for image in imagesToSave:
                saveResponsiveImage(image, outputLocation)
                
    print("=================== DONE! ===================")

def usage():
    print("========== Usage: web-img-gen -i <input file> -o <output directory> ==========")
    print("""
    Additional Arguments:

        -R  --recursive - Recursive mode, able to use a directory as the input
        -c  --config=   - Config file for custom suffixes and sizes. Example config - [{ size: 50, suffix: "_half" },{ size: [10, 20], suffix: "_small" }]
        -i  --input=    - input file or directory depending if recursive mode is turned on
        -o  --output=   - Output directory (doesnt need to exist)
        -h  --help      - Prints usage
    """)

def loadConfigByPath(path):
    global configs

    try:
        with open(path) as file:
            externalConfig = json.load(file)
            for config in configs:
                if "size" not in config or "suffix" not in config:
                    raise Exception("Property missing")
            configs = externalConfig

    except Exception as e:
        print(f"Error in config file! {e}")
        usage()
        sys.exit(2)

main()